# -*- coding: utf-8 -*-
"""
Created on Sat Nov  7 11:59:33 2020

@author: sayantan
"""
# Importing all libraries required in this notebook
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt 
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
# Reading data from remote link
url = "http://bit.ly/w-data"
dataframe = pd.read_csv(url)
print("Data imported successfully")

dataframe.head(10)
dataframe.shape
dataframe.head()

dataframe.describe()

dataframe.dtypes
# Plotting the distribution of scores

dataframe.plot(x='Hours',y='Scores',style='x')
plt.title("Hours vs Percentage")
plt.xlabel("Hours studied")
plt.ylabel('percentage grade/Score')
plt.show()
#Preparing the data or data pre-processing

x=dataframe.iloc[:,:-1].values
y=dataframe.iloc[:,1].values

#spliting the data set to test and train
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.25,random_state=5)

#fitting the regrerssion model to train set

from sklearn.linear_model import LinearRegression
regressor=LinearRegression()
regressor.fit(xtrain,ytrain)

#visualizing the result

plt.scatter(xtrain,ytrain,color='orange')
plt.plot(xtrain,regressor.predict(xtrain),color='green')
plt.title("hours vs percentage")
plt.xlabel('hours')
plt.ylabel('Percentage')
plt.show()



regressor.intercept_
regressor.coef_


Y_predict=regressor.predict(xtest)


Y_predict

dataframe=pd.DataFrame({'Actual':ytest,'Predicted':Y_predict})

dataframe



hours=[[9.25]]
pred=float(regressor.predict(hours))
print("No of hours={}".format(hours))
print("Predicted score={}".format(pred))

#confusing matrix for accuracy

from sklearn import metrics

print("Mean Absolute error",metrics.mean_absolute_error(ytest,Y_predict))
print("Mean squared error",metrics.mean_squared_error(ytest,Y_predict))
print("Root mean squared error",np.sqrt(metrics.mean_squared_error(ytest,Y_predict)))
